package com.example.acespringbackend.auth.dto;

/**
 * Data Transfer Object (DTO) for handling GitHub authentication requests.
 * This DTO specifically carries the Firebase ID Token obtained after a
 * successful GitHub authentication via Firebase on the client-side.
 */
public class GithubRequest { // Renamed to GithubRequest for consistency, but GithubAuthRequest is also acceptable

    /**
     * The Firebase ID Token. This token is generated by the Firebase SDK on the
     * client-side (frontend) upon successful authentication with GitHub.
     * The backend uses this token to verify the user's identity and establish
     * a secure session.
     */
    private String idToken;

    /**
     * Default no-argument constructor for {@code GithubRequest}.
     * This constructor is crucial for JSON deserialization by frameworks
     * like Spring, allowing incoming JSON payloads to be automatically
     * mapped to instances of this DTO.
     */
    public GithubRequest() {
    }

    /**
     * Constructs a new {@code GithubRequest} with the specified Firebase ID Token.
     *
     * @param idToken The Firebase ID Token obtained from the frontend after GitHub authentication.
     */
    public GithubRequest(String idToken) {
        this.idToken = idToken;
    }

    // --- Getter ---

    /**
     * Retrieves the Firebase ID Token.
     *
     * @return The Firebase ID Token as a {@link String}.
     */
    public String getIdToken() {
        return idToken;
    }

    // --- Setter ---

    /**
     * Sets the Firebase ID Token.
     *
     * @param idToken The Firebase ID Token to set.
     */
    public void setIdToken(String idToken) {
        this.idToken = idToken;
    }

    /**
     * Provides a string representation of the {@code GithubRequest} object,
     * useful for logging and debugging. Note: For security, consider masking
     * or omitting sensitive information like ID tokens in production logs.
     *
     * @return A string containing the ID token (potentially truncated or masked).
     */
    @Override
    public String toString() {
        // In a production environment, you might want to mask the ID token for logging
        // to prevent sensitive information exposure, e.g., using a substring or hash.
        return "GithubRequest{" +
               "idToken='" + (idToken != null && idToken.length() > 10 ? idToken.substring(0, 10) + "..." : idToken) + '\'' +
               '}';
    }
}